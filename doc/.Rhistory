if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(par=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
View(err_cv)
which.min(err_cv[,1])
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
fit_train <- train(dat_train, label_train, par_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
par_best$par
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
getwd()
set.seed(2018)
setwd("../doc")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 3  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 5, 1)
model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
215*284
a <- array(1:12, c(2,2,3))
a
a[1:2,,]
a[c(T,F),,][]
a[c(T,F),,]
a[1>1,,]
a[c(1>1,1==1),,]
b <- array(1:4,c(2,2))
b
b[c(T,F),]
b[c(T,T),]
a[1:2,,][c(T,F),,]
1 == 1| 1== 2
1 == 1| 1> 2
1 ~= 1| 1> 2
1 != 1| 1> 2
c(array(1:9,c(3,3)))
array(1:9,c(3,3))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
imgLR <- readImage(paste0(train_LR_dir,  "img_", sprintf("%04d", 1), ".jpg"))
width_LR <- dim(imgLR)[1]
height_LR <- dim(imgLR)[2]
width_LR
height_LR
dim(imgLR)
padded_image_LR <- array(0, c(width_LR+2, height_LR+2, 3))
padded_image_LR[2:(width_LR + 1), 2:(height_LR+1), ] = imgLR[,,]
samples <- sample.int(height_LR * width_LR, n_points)
row_LR <- floor((samples - 1)/height_LR + 1)
col_LR <- (samples - 1) %% height_LR + 1
row_HR <- 2*row_LR
col_HR <- 2*col_LR
img_HR <- imageData(imgHR)
padded_image_LR <- array(0, c(width_LR+2, height_LR+2, 3))
padded_image_LR[2:(width_LR + 1), 2:(height_LR+1), ] = imgLR[,,]
samples <- sample.int(height_LR * width_LR, 1000)
row_LR <- floor((samples - 1)/height_LR + 1)
col_LR <- (samples - 1) %% height_LR + 1
for(j in 1:n_points) {
featMat[(i-1)*n_points+j, , ] <- apply(padded_image_LR[row_LR[j]:(row_LR[j]+2), col_LR[j]:(col_LR[j]+2), ], 3, extract_feat)
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
labMat[(i-1)*n_points+j, ,] = sweep(img_HR[(row_HR[j]-1):row_HR[j], (col_HR[j]-1):col_HR[j],], 3,
padded_image_LR[row_LR[j]+1, col_LR[j]+1,])
}
n_points <- 1000
for(j in 1:n_points) {
featMat[(i-1)*n_points+j, , ] <- apply(padded_image_LR[row_LR[j]:(row_LR[j]+2), col_LR[j]:(col_LR[j]+2), ], 3, extract_feat)
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
labMat[(i-1)*n_points+j, ,] = sweep(img_HR[(row_HR[j]-1):row_HR[j], (col_HR[j]-1):col_HR[j],], 3,
padded_image_LR[row_LR[j]+1, col_LR[j]+1,])
}
featMat <- array(NA, c(1 * n_points, 8, 3))
labMat <- array(NA, c(1 * n_points, 4, 3))
n_files<-1
for(j in 1:n_points) {
featMat[(i-1)*n_points+j, , ] <- apply(padded_image_LR[row_LR[j]:(row_LR[j]+2), col_LR[j]:(col_LR[j]+2), ], 3, extract_feat)
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
labMat[(i-1)*n_points+j, ,] = sweep(img_HR[(row_HR[j]-1):row_HR[j], (col_HR[j]-1):col_HR[j],], 3,
padded_image_LR[row_LR[j]+1, col_LR[j]+1,])
}
i<-1
for(j in 1:n_points) {
featMat[(i-1)*n_points+j, , ] <- apply(padded_image_LR[row_LR[j]:(row_LR[j]+2), col_LR[j]:(col_LR[j]+2), ], 3, extract_feat)
### step 2.2. save the corresponding 4 sub-pixels of imgHR in labMat
labMat[(i-1)*n_points+j, ,] = sweep(img_HR[(row_HR[j]-1):row_HR[j], (col_HR[j]-1):col_HR[j],], 3,
padded_image_LR[row_LR[j]+1, col_LR[j]+1,])
}
for(j in 1:n_points) {
featMat[(i-1)*n_points+j, , ] <- apply(padded_image_LR[row_LR[j]:(row_LR[j]+2), col_LR[j]:(col_LR[j]+2), ], 3, extract_feat)
}
featMat[(i-1)*n_points:i*n_points, , ][row_LR == 1, c(1,4,7),] <- 0
featMat[(i-1)*n_points:i*n_points, , ][row_LR == width_LR, c(3,6,9),] <- 0
featMat[(i-1)*n_points:i*n_points, , ][col_LR == 1, c(1,2,3),] <- 0
featMat[(i-1)*n_points:i*n_points, , ][col_LR == height_LR, c(7,8,9),] <- 0
featMat[(i-1)*n_points:i*n_points, , ]
featMat
featMat[((i-1)*n_points):(i*n_points), , ][row_LR == 1, c(1,4,7),] <- 0
featMat
row_LR
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
featMat[((i-1)*n_points):(i*n_points), , ][row_LR == 1, c(1,4,7),] <- 0
featMat[((i-1)*n_points):(i*n_points), , ][row_LR == width_LR, c(3,6,9),] <- 0
featMat[((i-1)*n_points):(i*n_points), , ][col_LR == 1, c(1,2,3),] <- 0
featMat[((i-1)*n_points):(i*n_points), , ][col_LR == height_LR, c(7,8,9),] <- 0
row_LR == width_LR
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
source("../lib/train.R")
source("../lib/test.R")
par_best <- 5
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
par_best <- list(depth=5)
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
1:3*5
a
c(a)
a <- array(1:24,c(4,2,3))
a
a <- array(1:24,c(2,4,3))
a
]a[1:2,1:2,]
a[1:2,1:2,]
a[1,,] <- a[1:2,1:2,]
a
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
imgLR <- readImage(paste0(test_LR_dir,  "img", "_", sprintf("%04d", 1), ".jpg"))
pathHR <- paste0(test_HR_dir,  "img", "_", sprintf("%04d", 1), ".jpg")
featMat <- array(NA, c(dim(imgLR)[1] * dim(imgLR)[2], 8, 3))
width_LR <- dim(imgLR)[1]
height_LR <- dim(imgLR)[2]
padded_image_LR <- array(0, c(width_LR+2, height_LR+2, 3))
padded_image_LR[2:(width_LR + 1), 2:(height_LR+1), ] = imgLR[,,]
for(j in 1:(width_LR * height_LR)){
row_LR <- floor((j - 1)/height_LR + 1)
col_LR <- (j - 1) %% height_LR + 1
featMat[j, , ] <- apply(padded_image_LR[row_LR:(row_LR+2), col_LR:(col_LR+2), ], 3, extract_feat)
}
featMat[1:height_LR, c(1,4,6),] <- 0
featMat[(width_LR * height_LR-height_LR):(width_LR * height_LR), c(3,5,8),] <- 0
featMat[(1:width_LR-1)*height_LR+1, c(1,2,3),] <- 0
featMat[(1:width_LR)*height_LR, c(6,7,8),] <- 0
### step 2. apply the modelList over featMat
predMat <- test(modelList, featMat)
featMat[1:height_LR, c(1,4,6),] <- 0
featMat[(width_LR * height_LR-height_LR):(width_LR * height_LR), c(3,5,8),] <- 0
featMat[(1:width_LR-1)*height_LR+1, c(1,2,3),] <- 0
featMat[(1:width_LR)*height_LR, c(6,7,8),] <- 0
### step 2. apply the modelList over featMat
predMat <- test(fit_train, featMat)
height_HR <- 2*height_LR
width_HR <- 2*width_LR
pred_Mat <- array(predMat, dim=c(width_LR*height_LR, 4, 3))
img_HR_pred <- array(NA, c(width_HR, height_HR, 3))
for(j in 1:(width_LR * height_LR)) {
row_LR <- floor((j - 1)/height_LR + 1)
col_LR <- (j - 1) %% height_LR + 1
img_HR_pred[(2*row_LR-1):(2*row_LR), (2*col_LR-1):(2*col_LR),] <- pred_Mat[j,,]
}
pred_Mat
img_center <- imageData(imgLR[rep(1:width_LR, times = rep(2, width_LR)),,])
img_center <- img_center[, rep(1:height_LR, times = rep(2, height_LR)),]
img_pred <- img_HR_pred + img_center
img_display <- Image(img_pred)
display(img_display)
imgHR <- readImage(pathHR)
mse_i <- sum((imgHR - img_HR_pred)^2)/(3*height_HR*width_HR)
if (i==1){
mse <- mse_i
psnr <- 20*log(255) - 10*log(mse_i)
} else {
mse <- c(mse, mse_i)
psnr <- c(psnr, 20*log(1) - 10*log(mse_i))
}
}
imgHR <- readImage(pathHR)
mse_i <- sum((imgHR - img_HR_pred)^2)/(3*height_HR*width_HR)
if (i==1){
mse <- mse_i
psnr <- 20*log(255) - 10*log(mse_i)
} else {
mse <- c(mse, mse_i)
psnr <- c(psnr, 20*log(1) - 10*log(mse_i))
}
psnr
tm_test=NA
if(run.test){
load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
1：5-1
11%%10
floor((1:100 - 1)/10 + 1)
(1:100 - 1) %% 10 + 1
1:100  %% 10
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
imgLR
img_center <- imageData(imgLR[rep(1:width_LR, times = rep(2, width_LR)),,])
img_center <- img_center[, rep(1:height_LR, times = rep(2, height_LR)),]
img_center
img_center[1:6,1:6,1]
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
# load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
psnr
result
sweep(array(1:12,c(2,2,3)),3,c(1,2,3))
imgLR <- readImage(paste0(test_LR_dir,  "img", "_", sprintf("%04d", 2), ".jpg"))
pathHR <- paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg")
featMat <- array(NA, c(dim(imgLR)[1] * dim(imgLR)[2], 8, 3))
### step 1. for each pixel and each channel in imgLR:
###           save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
width_LR <- dim(imgLR)[1]
height_LR <- dim(imgLR)[2]
padded_image_LR <- array(0, c(width_LR+2, height_LR+2, 3))
padded_image_LR[2:(width_LR + 1), 2:(height_LR+1), ] = imgLR[,,]
row_LR <- floor((1:(width_LR * height_LR) - 1)/height_LR + 1)
col_LR <- (1:(width_LR * height_LR) - 1) %% height_LR + 1
for(j in 1:(width_LR * height_LR)){
featMat[j, , ] <- apply(padded_image_LR[row_LR[j]:(row_LR[j]+2), col_LR[j]:(col_LR[j]+2), ], 3, extract_feat)
}
featMat[1:height_LR, c(1,4,6),] <- 0
featMat[(width_LR * height_LR-height_LR+1):(width_LR * height_LR), c(3,5,8),] <- 0
featMat[(1:width_LR-1)*height_LR+1, c(1,2,3),] <- 0
featMat[(1:width_LR)*height_LR, c(6,7,8),] <- 0
predMat <- test(modelList, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
height_HR <- 2*height_LR
width_HR <- 2*width_LR
pred_Mat <- array(predMat, dim=c(width_LR*height_LR, 4, 3))
img_HR_pred <- array(NA, c(width_HR, height_HR, 3))
for(j in 1:(width_LR * height_LR)) {
img_HR_pred[(2*row_LR[j]-1):(2*row_LR[j]), (2*col_LR[j]-1):(2*col_LR[j]),] <- pred_Mat[j,,]
}
img_center <- imageData(imgLR[rep(1:width_LR, times = rep(2, width_LR)),,])
img_center <- img_center[, rep(1:height_LR, times = rep(2, height_LR)),]
img_pred <- img_HR_pred + img_center
img_display <- Image(img_pred)
predMat <- test(fit_train, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
height_HR <- 2*height_LR
width_HR <- 2*width_LR
pred_Mat <- array(predMat, dim=c(width_LR*height_LR, 4, 3))
img_HR_pred <- array(NA, c(width_HR, height_HR, 3))
for(j in 1:(width_LR * height_LR)) {
img_HR_pred[(2*row_LR[j]-1):(2*row_LR[j]), (2*col_LR[j]-1):(2*col_LR[j]),] <- pred_Mat[j,,]
}
img_center <- imageData(imgLR[rep(1:width_LR, times = rep(2, width_LR)),,])
img_center <- img_center[, rep(1:height_LR, times = rep(2, height_LR)),]
img_pred <- img_HR_pred + img_center
img_display <- Image(img_pred)
display(img_display)
display(imgLR)
display(img_center)
display(Image(imgLr))
display(Image(imgLR))
display(Image(imageData(imgLR)))
?imageData
ImgLR
imgLR
?Image
img_display <- Image(img_pred, colormode = 'Color')
display(img_display)
imgHR <- imageData(readImage(pathHR))
mse_i <- sum((imgHR - img_pred)^2)/(3*height_HR*width_HR)
if (i==1){
mse <- mse_i
psnr <- 20*log(1) - 10*log(mse_i)
} else {
mse <- c(mse, mse_i)
psnr <- c(psnr, 20*log(1) - 10*log(mse_i))
}
imgHR <- imageData(readImage(pathHR))
mse_i <- sum((imgHR - img_pred)^2)/(3*height_HR*width_HR)
if (i==1){
mse <- mse_i
psnr <- 20*log(1) - 10*log(mse_i)
} else {
mse <- c(mse, mse_i)
psnr <- c(psnr, 20*log(1) - 10*log(mse_i))
}
imgHR
img_pred
mse_i <- sum((imgHR - img_pred)^2)/(3*height_HR*width_HR)
dim(imgHR)
dim(img_pred)
### step 2. apply the modelList over featMat
predMat <- test(modelList, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
height_HR <- 2*height_LR
width_HR <- 2*width_LR
pred_Mat <- array(predMat, dim=c(width_LR*height_LR, 4, 3))
img_HR_pred <- array(NA, c(width_HR, height_HR, 3))
for(j in 1:(width_LR * height_LR)) {
img_HR_pred[(2*row_LR[j]-1):(2*row_LR[j]), (2*col_LR[j]-1):(2*col_LR[j]),] <- pred_Mat[j,,]
}
img_center <- imageData(imgLR[rep(1:width_LR, times = rep(2, width_LR)),,])
img_center <- img_center[, rep(1:height_LR, times = rep(2, height_LR)),]
img_pred <- img_HR_pred + img_center
dim(img_pred)
dim(img_center)
dim(img_HR_pred)
height_LR
dim(imgLR)
display(imgLR)
imgHR <- imageData(readImage(paste0(test_HR_dir,  "img", "_", sprintf("%04d", 2), ".jpg")))
dim(imgHR)
mse_i <- sum((imgHR - img_pred)^2)/(3*height_HR*width_HR)
psnr <- 20*log(1) - 10*log(mse_i)
psnr
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
# load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
result
img_display <- Image(img_pred, colormode = 'Color')
# display(img_display)
display(img_display)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
n cross-validation on the training set
set.seed(2018)
setwd("../doc")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 3  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train.RData")
tm_test <- system.time(result <- superResolution(test_LR_dir, test_HR_dir, fit_train))
}
